//Conditional statements in C-
/*15. Write a C program to check whether a triangle can be formed by the given
value for the angles.
*/
#include<stdio.h>
int main()
{
  float anglea,angleb,anglec,sum;
  printf("Input the three Angles:\n");
  scanf("%f%f%f",&anglea,&angleb,&anglec);
  sum=anglea+angleb+anglec;
  if(sum==180)
  printf("Triangle is Formed\n");
  else
  printf("Triangle is not Formed\n");
}


/*9. Write a C program to accept a coordinate point in a XY coordinate system and
determine in which quadrant the coordinate point lies.*/
#include<stdio.h>
int main()
{
  int x,y;
  printf("Input the coordinate point of x and y axis\n");
  scanf("%d%d",&x,&y);
  if(x>0 && y>0)
  printf("The Coordinates (%d,%d) lies in the First quadrant\n",x,y);
  else if(x<0 && y>0)
  printf("The Coordinates (%d,%d) lies in the second quadrant\n",x,y);
  else if(x<0 && y<0)
  printf("The Coordinates (%d,%d) lies in the third quadrant\n",x,y);
  else if(x>0 && y<0)
  printf("The Coordinate (%d,%d) lies in the fourth quadrant\n",x,y);
  else if(x==0 && y==0)
  printf("The Coordinates (%d,%d) lies on the origin\n",x,y);
}

//Loops in C-
/*22. Write a program in C to print the Floyd&#39;s Triangle.*/
#include <stdio.h>
#include <conio.h>
int main()
{
    int num, i, j, k = 1;

    printf( " Enter a number of rows in Floyd's triangle: \n");
    scanf( "%d", &num);
    // use nested for loop
    // outer for loop define the rows and check rows condition
    for (i = 1; i <= num; i++)
    {
        // inner loop check j should be less than equal to 1 and print the data.
        for (j = 1; j <= i; j++)
        {
            printf(" %2d", k++); // print the number
        }
        printf( "\n");
        }
        return 0;
}

/*29.Write a C program to check whether a given number is an armstrong number
or not.*/
#include <stdio.h>
int main() {
    int num, originalNum, remainder, result = 0;
    printf("Enter a three-digit integer: ");
    scanf("%d", &num);
    originalNum = num;

    while (originalNum != 0) {
       // remainder contains the last digit
        remainder = originalNum % 10;

       result += remainder * remainder * remainder;

       // removing last digit from the orignal number
       originalNum /= 10;
    }

    if (result == num)
        printf("%d is an Armstrong number.", num);
    else
        printf("%d is not an Armstrong number.", num);

    return 0;
}

//Arrays in C-

/*87. Write a program in C to find the maximum element in an array which is first
increasing and then decreasing.*/
#include <stdio.h>
int findMaximum(int arr[], int low, int high)
{
int max = arr[low];
int i;
for (i = low+1; i <= high; i++)
{
	if (arr[i] > max)
		max = arr[i];
	else
		break;
}
return max;
}

/* Driver program to check above functions */
int main()
{
int arr[] = {1, 30, 40, 50, 60, 70, 23, 20};
int n = sizeof(arr)/sizeof(arr[0]);
printf("The maximum element is %d", findMaximum(arr, 0, n-1));
getchar();
return 0;
}

/*96.Write a program in C to segregate even and odd elements on an array.
#include<stdio.h>*/

void swap(int *a, int *b);

void segregateEvenOdd(int arr[], int size)
{
	int left = 0, right = size-1;
	while (left < right)
	{

		while (arr[left]%2 == 0 && left < right)
			left++;


		while (arr[right]%2 == 1 && left < right)
			right--;

		if (left < right)
		{

			swap(&arr[left], &arr[right]);
			left++;
			right--;
		}
	}
}

void swap(int *a, int *b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}

/* driver program to test */
int main()
{
	int arr[] = {12, 34, 45, 9, 8, 90, 3};
	int arr_size = sizeof(arr)/sizeof(arr[0]);
	int i = 0;

	segregateEvenOdd(arr, arr_size);

	printf("Array after segregation ");
	for (i = 0; i < arr_size; i++)
		printf("%d ", arr[i]);

	return 0;
}


/*93.Write a program in C to rearrange positive and negative numbers
alternatively in a given array.*/
#include <stdio.h>

void swap(int *a, int *b);
void rearrange(int arr[], int n)
{
	int i = -1;
	int j;
	for ( j = 0; j < n; j++)
	{
		if (arr[j] < 0)
		{
			i++;
			swap(&arr[i], &arr[j]);
		}
	}
	int pos = i+1, neg = 0;
	while (pos < n && neg < pos && arr[neg] < 0)
	{
		swap(&arr[neg], &arr[pos]);
		pos++;
		neg += 2;
	}
}
// A utility function to swap two elements
void swap(int *a, int *b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
void printArray(int arr[], int n)
{
    int i;
	for ( i = 0; i < n; i++)
		printf("%4d ", arr[i]);
}

// Driver program to test above functions
int main()
{
	int arr[] = {-1, 2, -3, 4,
				5, 6, -7, 8, 9};
	int n = sizeof(arr)/sizeof(arr[0]);
	rearrange(arr, n);
	printArray(arr, n);
	return 0;
}

/*52. Write a program in C to count the number of triangles can be fromed from a
given array.*/
#include <stdio.h>

int findNumberOfTriangles(int arr[], int n)
{

	int count = 0;
	int i;
	int j;
	int k;
	for ( i = 0; i < n; i++) {
		for ( j = i + 1; j < n; j++) {

			for ( k = j + 1; k < n; k++)
				if (arr[i] + arr[j] > arr[k]
					&& arr[i] + arr[k] > arr[j]
					&& arr[k] + arr[j] > arr[i])
					count++;
		}
	}
	return count;
}

// Driver code
int main()
{
	int arr[] = { 10, 21, 22, 100, 101, 200, 300 };
	int size = sizeof(arr) / sizeof(arr[0]);

	printf("Total number of triangles possible is %d ",
		findNumberOfTriangles(arr, size));
	return 0;
}

